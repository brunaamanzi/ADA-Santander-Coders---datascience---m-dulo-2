# -*- coding: utf-8 -*-
"""Projeto Py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1coyUXE4ruuaSrNCxKxi0WeoxiB9iRcef

# **Este é o segundo projeto do curso de Data Science na materia de técnicas de programação.**
# *Este curso é organizado pela ada e patrocinada pelo Santander.*




<img src="https://www.meioemensagem.com.br/wp-content/uploads/2018/03/Santander_NovaMarca_575.png" alt="Imagem Logo Santader" width="400" height="200">
<img src="https://ada-site-frontend.s3.sa-east-1.amazonaws.com/home/header-logo.svg" alt="Logo Ada" width="300" height="200">

Conforme a proposta de analise exploratoria proposta para esse projeto escolhemos um dataset da fila de espera de transplante de rim no brasil.

Fonte:  https://www.kaggle.com/datasets/gustavomodelli/waitlist-kidney-brazil

**Membros do Grupo:**




* André Oliveira
* Bruna Manzi
* Jenifer Ferreira
* Vinicius Batista

Objetivo com o data Set escolhido:

Nosso grupo optou por este dataset na area da saúde para estudar e prever correlações

**Bibliotecas usadas:**
"""

!pip install lifelines
!pip install seaborn

import numpy as nb
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Importando o DataSet:**"""

from google.colab import drive
drive.mount('/content/drive')

df_kidney = pd.read_csv('//content/drive/MyDrive/Santander Coders/DataSets/waitlist_kidney_brazil.csv', encoding='latin-1')
df_kidney.head()



"""**Analisando dados do Dataset:**

O comando ".desc()" informa a quantidade de valores não-nulos (non-null) de cada coluna, a nomenclatura de cada coluna e o tipo de Dado de cada coluna (int64, object e float64, por exemplo). Valores Nulos podem interferir nas análises, sendo necessário um tratamento dos mesmos. Além disso, é fundamental uma análise se o tipo de dado é concordante com a informação que a coluna pretende transmitir.
Em seguido utilizamos o comando describe para verificar as médias do dataset.


***Nota-se valores nulos na coluna "number_gestation", "chagas", "anti.HCV", "agHBs" e "razon_removed".***
"""

print(f'o tamanho do data set é:\n{df_kidney.shape}')
print(f'{df_kidney.info()}')
df_kidney.describe()

"""**Olhando os nomes de colunas omitidas:**"""

df_kidney.columns

"""**Removendo cabeçalhos não utilizados nesta analise:**"""

predictor_columns = [
    'age_at_list_registration', 'sex', 'race', 'time_on_Dialysis', 'Blood_type', 'age_cat', 'Transplant', 'cPRA_cat',
    'number_transfusion', 'gestation', 'number_gestation', 'prior_transplant', 'underline_disease',
    'number_prior_transplant', 'chagas', 'anti.HBc', 'anti.HCV', 'agHBs', 'Transplant_Y_N', 'Time_Tx', 'time'
]

predictors = df_kidney[predictor_columns]

df_kidney = predictors.copy()
df_kidney.head()

"""**Verificando numero de dados duplicados e eliminando eles usando drop:**

"""

print(df_kidney.duplicated().sum())
df_kidney = df_kidney.drop_duplicates()
df_kidney.duplicated().sum()

"""**O comando ".unique()" retorna os valores únicos contidos na coluna selecionada. Aplica-se nas colunas com dados do tipo "Object" para uma análise os dados da coluna estão congruentes com a informação transmitida.**"""

df_kidney['anti.HCV'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title("Pessoas com HIV na lista de espera")
plt.show()

"""**Como vemos com o comando mode(moda) a idade mais comum de falha do rim é 56, sexo masculino e tipo sanguineo O.**"""

df_kidney.mode()

"""Com esse grafica analisamos a situação geral da lista de espera, sendo:

52.5% ainda na espera
"""

df_kidney['Transplant'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Pie Chart of feature: Transplant')
plt.show()
df_kidney['Transplant'].value_counts()

"""- CORRELAÇÃO ENTRE O TEMPO MÉDIO PARA TRANSPLANTES REALIZADOS COM ÊXITO E SEXO

Realizou-se uma análise para determinar se a média do Tempo de Espera é maior ou menor para o grupo do "Sexo Feminino" em comparação com o grupo do "Sexo Masculino"
"""

#Criando uma Máscara para Transplantes bem-sucedidos
transplante_sim = df_kidney['Transplant'] == 'Sim'

#Criando a Máscara para o grupo do Sexo Feminino

feminino = df_kidney['sex'] == 'F'
#Salvando na variável "feminino", pois o retorno do código "df_listadeespera['sex'] == 'F'"
#é um valor Booleano.

#Aplicando a máscara no Dataframe original, teremos apenas as colunas com o grupo do "Sexo
#Feminino" no novo dataframe
fem_transplante_sim = df_kidney[feminino][transplante_sim]

fem_transplante_sim

#Quantidade de transplantes bem sucedidos para o grupo do Sexo Feminino
len(fem_transplante_sim['time'])

"""Aplicando a lógica anterior para adquirir a média de tempo na fila de espera para o grupo do sexo masculino"""

#criando a máscara
masculino = df_kidney['sex'] == 'M'

#Aplicando a máscara no Dataframe original, teremos apenas as colunas com o grupo do "Sexo
#Feminino" no novo dataframe
mas_transplante_sim = df_kidney[masculino][transplante_sim]
mas_transplante_sim

mas_transplante_sim['time'].mean()

"""Criando um gráfico para comparar os grupos em relação ao tempo de espera, utilizando a biblioteca matplotlib"""

#Criando duas variáveis para armazenar o valor da média do tempo
media_fem = fem_transplante_sim['time'].mean()
media_mas = mas_transplante_sim['time'].mean()

#Criando o Gráfico de Barras
plt.bar(['Feminino', 'Masculino'], [media_fem, media_mas], edgecolor = (0, 0, 0)) #Criação dos eixos do Gráfico
plt.xlabel('Sexo') #Legenda para o eixo x
plt.ylabel('Média de Tempo de Espera') #Legenda para o eixo y
plt.title('Relação do Tempo de Espera por Sexo para Transplantes Realizados com Sucesso') #Título do Gráfico

"""-  AVALIANDO RELAÇÃO ENTRE IDADE E TEMPO DE ESPERA"""

#Verificando os dados únicos para a faixa de idade
df_kidney['age_cat'].unique()

"""Observou-se que a coluna 'age_cat' trabalha com 3 faixas de idade: Maior que 60, entre 18 a 60 e menor que 18 anos."""

range18a60 = df_kidney['age_cat'] == '18.a.60'

entre18a60 = df_kidney[range18a60][transplante_sim]

rangemaior60 = df_kidney['age_cat'] == 'Maior.60'

maior60 = df_kidney[rangemaior60][transplante_sim]

rangemenor18 = df_kidney['age_cat'] == 'Menor.18'

menor18 = df_kidney[rangemenor18][transplante_sim]

#Criando o Gráfico de Barras
plt.bar(
    ['Menor que 18 anos', '18 a 60 anos', 'Maior que 60 anos'], #Legenda para as Barras
    [len(menor18), len(entre18a60), len(maior60)], #Quantidade de transplantes realizados com sucesso
    edgecolor = (0, 0, 0), #Bordas na cor preta para o gráfico
    color = ['blue', 'green', 'red'] #Cores das Barras
    )
#Criação dos eixos do Gráfico
plt.xlabel('Faixa de Idade') #Legenda para o eixo x
plt.ylabel('Quantidade de Transplantes') #Legenda para o eixo y
plt.title('Transplantes realizados com sucesso por Faixa de idade') #Título do Gráfico

"""- CORRELAÇÃO ENTRE O TIPO SANGUÍNEO E O TEMPO DE ESPERA"""

#Verificando os valores únicos para a coluna "Blood_type"
df_kidney['Blood_type'].unique()

type_A = df_kidney['Blood_type'] == 'A' #Máscara para retornar apenas os Dados do Tipo 'A'

time_A = df_kidney[type_A]['time'].mean()
time_A

type_O = df_kidney['Blood_type'] == 'O' #Máscara para retornar apenas os Dados do Tipo 'A'

time_O = df_kidney[type_O]['time'].mean()
time_O

type_B = df_kidney['Blood_type'] == 'B' #Máscara para retornar apenas os Dados do Tipo 'A'

time_B = df_kidney[type_B]['time'].mean()
time_B

type_AB = df_kidney['Blood_type'] == 'AB' #Máscara para retornar apenas os Dados do Tipo 'A'

time_AB = df_kidney[type_AB]['time'].mean()
time_AB

df_kidney['Blood_type'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Porcentagens dos tipos sanguineos na lista de espera')
plt.show()
df_kidney['Blood_type'].value_counts()

plt.bar(
    ['Tipo A', 'Tipo O', 'Tipo B', 'Tipo AB'], #Legenda para as Barras
    [time_A, time_O, time_B, time_AB], #Quantidade de transplantes realizados com sucesso
    edgecolor = (0, 0, 0), #Bordas na cor preta para o gráfico
    color = ['blue', 'green', 'red', 'yellow'] #Cores das Barras
    )
#Criação dos eixos do Gráfico
plt.xlabel('Tipo Sanguíneo') #Legenda para o eixo x
plt.ylabel('Média de Tempo de Espera') #Legenda para o eixo y
plt.title('Tempo médio de Espera por Tipo Sanguíneo') #Título do Gráfico

"""**Conclusão da Analise**

Após examinar os dados coletados, pudemos extrair informações bastante interessantes. Por exemplo, observamos que o tipo sanguíneo mais comumente associado a falhas renais é o O+. Considerando a distribuição dos tipos sanguíneos no Brasil, percebemos que o O+ é o segundo mais prevalente, sugerindo uma possível correlação com esse problema. No entanto, para confirmar essa hipótese, será necessário conduzir uma análise mais aprofundada, incluindo a coleta de informações sobre o estilo de vida dos pacientes.

Além disso, identificamos diferenças significativas no tempo de espera pela realização do transplante renal, tanto com relação ao sexo quanto à idade. Notavelmente, as mulheres tendem a permanecer mais tempo na fila de espera e apresentam uma taxa de mortalidade menor em comparação aos homens. Um próximo passo crucial seria investigar a adesão ao tratamento entre esses grupos e, possivelmente, promover a conscientização entre o público masculino sobre a importância da manutenção da saúde renal durante o período de espera, visando aprimorar as taxas de sucesso no transplante.


Quanto ao projeto do curso e ao aprendizado, conseguimos aprimorar significativamente nossa colaboração em equipe e o domínio das ferramentas Pandas/Python.
"""